# For this project utilizes Spotify data from Kaggle. Then I created a table to insert Spotify data into and performed analytics with CTE on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. What is the average danceability, popularity, and energy by artist? Which artist have danceability, popularity, and energy above average?
SELECT artist_name, AVG(danceability), AVG(popularity), AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING AVG(danceability) > 0.7
   AND AVG(popularity) > 8
   AND AVG(energy) > 0.6
;

#2. Who are the top 10 artists based on popularity? 
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10
;

#3. What's the average danceability for the 10 most popular songs? 
SELECT AVG(danceability) AS danceability_for_10_most_popular_songs
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10
;

#4. Using CTE to calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH PopularityAvgCTE AS (
  SELECT s.artist_name, AVG(s.popularity) AS average_popularity
  FROM spotifydata s
  GROUP BY s.artist_name
)
SELECT  artist_name,average_popularity,'Top Star' AS tag
FROM PopularityAvgCTE
WHERE average_popularity>=90;
